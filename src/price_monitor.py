import csv
import os
import yaml
import random
from datetime import datetime
from .web_parser import WebPriceParser

class PriceMonitor:
    def __init__(self, config_path="config/config.yaml"):
        self.config_path = config_path
        self.load_config()
        self.parser = WebPriceParser(self.config)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        os.makedirs("data", exist_ok=True)
        self.data_file = "data/historical_prices.csv"

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as file:
                self.config = yaml.safe_load(file)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            self.config = {'scout': {'target_materials': [], 'suppliers': {}}}

    def get_all_prices(self, use_parser=True):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–Ω"""
        if use_parser:
            print("üåê –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω...")
            return self.parser.parse_all_prices()
        else:
            return self.get_mock_prices()

    def get_mock_prices(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        base_prices = {
            "–±–µ—Ç–æ–Ω M300": 4500,
            "–∞—Ä–º–∞—Ç—É—Ä–∞ 12–º–º": 85, 
            "—Ü–µ–º–µ–Ω—Ç M500": 420,
            "–∫–∏—Ä–ø–∏—á –∫—Ä–∞—Å–Ω—ã–π": 25,
            "–≥–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω 12–º–º": 410,
            "–∫—Ä–∞—Å–∫–∞ –±–µ–ª–∞—è –∏–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è": 1800,
            "–ø–ª–∏—Ç–∫–∞ –Ω–∞–ø–æ–ª—å–Ω–∞—è –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è": 850,
            "—É—Ç–µ–ø–ª–∏—Ç–µ–ª—å –ø–µ–Ω–æ–ø–ª–∞—Å—Ç 50–º–º": 2800,
            "–ø—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª –°8": 350,
            "–¥–æ—Å–∫–∞ –æ–±—Ä–µ–∑–Ω–∞—è 50x100": 12000
        }
        
        prices_data = []
        for supplier_name in self.config['scout']['suppliers']:
            for material in self.config['scout']['target_materials']:
                base_price = base_prices.get(material, 1000)
                price_variation = base_price * random.uniform(-0.1, 0.1)
                price = round(base_price + price_variation, 2)
                
                prices_data.append({
                    'material': material,
                    'supplier': supplier_name,
                    'price': price,
                    'product_name': f"{material} ({supplier_name})",
                    'url': f"https://example.com/{material.replace(' ', '-')}",
                    'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                })
        
        return prices_data

    def save_prices(self, prices_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω –≤ CSV"""
        file_exists = os.path.exists(self.data_file)
        
        with open(self.data_file, 'a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            
            if not file_exists:
                writer.writerow(['material', 'supplier', 'price', 'product_name', 'url', 'date'])
            
            for item in prices_data:
                writer.writerow([
                    item['material'],
                    item['supplier'],
                    item['price'],
                    item.get('product_name', ''),
                    item.get('url', ''),
                    item.get('date', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
                ])
        
        print(f"üíæ –¶–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(prices_data)} –∑–∞–ø–∏—Å–µ–π")

    def find_best_prices(self):
        """–ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö —Ü–µ–Ω –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É"""
        prices_data = self.get_all_prices(use_parser=False)  # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
        best_prices = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
        materials_dict = {}
        for item in prices_data:
            material = item['material']
            if material not in materials_dict:
                materials_dict[material] = []
            materials_dict[material].append(item)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã
        for material, items in materials_dict.items():
            if items:
                best_item = min(items, key=lambda x: x['price'])
                all_prices = [item['price'] for item in items]
                avg_price = sum(all_prices) / len(all_prices)
                economy = avg_price - best_item['price']
                
                best_prices.append({
                    'material': material,
                    'best_supplier': best_item['supplier'],
                    'best_price': best_item['price'],
                    'product_name': best_item.get('product_name', ''),
                    'url': best_item.get('url', ''),
                    'economy': round(economy, 2),
                    'all_options': [{'supplier': item['supplier'], 'price': item['price']} for item in items]
                })
        
        return best_prices

    def get_price_history(self, material, days=30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É"""
        if not os.path.exists(self.data_file):
            return []
        
        history = []
        with open(self.data_file, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if row['material'] == material:
                    history.append({
                        'supplier': row['supplier'],
                        'price': float(row['price']),
                        'date': row['date']
                    })
        
        return history