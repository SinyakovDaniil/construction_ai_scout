import requests
from bs4 import BeautifulSoup
import time
import random
import re
from urllib.parse import quote, urljoin
from datetime import datetime
from fake_useragent import UserAgent

class WebPriceParser:
    def __init__(self, config):
        self.config = config
        self.session = requests.Session()
        self.ua = UserAgent()
        self.update_headers()

    def update_headers(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        self.session.headers.update({
            'User-Agent': self.ua.random,
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })

    def search_product(self, supplier_name, product_name):
        """–†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
        supplier_config = self.config['scout']['suppliers'].get(supplier_name)
        if not supplier_config:
            return None
        
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è URL
            search_query = quote(product_name)
            search_url = supplier_config['search_url'].format(query=search_query)
            
            print(f"üîç –ò—â–µ–º '{product_name}' –≤ {supplier_name}...")
            
            response = self.session.get(
                search_url, 
                timeout=self.config['scout']['parser_settings']['timeout']
            )
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            products = self.parse_real_search_results(response.text, supplier_config, product_name)
            
            if products:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                print(f"   ‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            return products
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {supplier_name}: {e}")
            return None

    def parse_real_search_results(self, html, supplier_config, original_query):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        soup = BeautifulSoup(html, 'html.parser')
        selectors = supplier_config['selectors']
        
        products = []
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
        product_cards = soup.select(selectors['product_card'])
        
        for card in product_cards[:self.config['scout']['parser_settings']['max_products_per_search']]:
            try:
                product_data = self.extract_real_product_data(card, selectors, supplier_config['base_url'])
                if product_data and self.is_relevant_product(product_data['name'], original_query):
                    products.append(product_data)
            except Exception as e:
                continue
        
        return products

    def extract_real_product_data(self, product_element, selectors, base_url):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ"""
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        title_element = product_element.select_one(selectors['product_title'])
        if not title_element:
            return None
            
        product_name = title_element.get_text(strip=True)
        
        # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
        price = self.extract_real_price(product_element, selectors)
        if not price:
            return None
            
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
        link_element = product_element.select_one(selectors['product_link'])
        if link_element and link_element.get('href'):
            product_url = link_element.get('href')
            if not product_url.startswith('http'):
                product_url = urljoin(base_url, product_url)
        else:
            product_url = ""
        
        return {
            'name': product_name,
            'price': price,
            'url': product_url,
            'date_found': datetime.now()
        }

    def extract_real_price(self, product_element, selectors):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
        price_text = ""
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ü–µ–Ω—ã
        price_selectors = [
            selectors['product_price'],
            'span.price',
            'div.price',
            'meta[itemprop="price"]',
            'span[class*="price"]',
            'div[class*="price"]'
        ]
        
        for selector in price_selectors:
            price_element = product_element.select_one(selector)
            if price_element:
                if price_element.get('content'):  # –î–ª—è meta —Ç–µ–≥–æ–≤
                    price_text = price_element.get('content')
                else:
                    price_text = price_element.get_text(strip=True)
                if price_text:
                    break
        
        return self.clean_price(price_text)

    def clean_price(self, price_text):
        """–û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ"""
        if not price_text:
            return None
            
        # –£–¥–∞–ª—è–µ–º –≤—Å—ë –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        cleaned = re.sub(r'[^\d]', '', str(price_text))
        
        try:
            return float(cleaned)
        except ValueError:
            return None

    def is_relevant_product(self, product_name, search_query):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –∑–∞–ø—Ä–æ—Å—É"""
        search_words = search_query.lower().split()
        product_name_lower = product_name.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        exclude_words = ['–∞–∫—Å–µ—Å—Å—É–∞—Ä', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '–∫–∏—Å—Ç—å', '–≤–∞–ª–∏–∫', '–ø–µ—Ä—á–∞—Ç–∫']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if any(exclude in product_name_lower for exclude in exclude_words):
            return False
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–ª–æ–≤
        matches = sum(1 for word in search_words if word in product_name_lower)
        
        return matches >= len(search_words) * 0.3  # 30% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ

    def parse_all_prices(self, selected_city=None):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –≥–æ—Ä–æ–¥—É"""
        all_prices = []
        settings = self.config['scout']['parser_settings']
        
        for supplier_name, supplier_config in self.config['scout']['suppliers'].items():
            # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
            if selected_city and selected_city not in supplier_config['regions']:
                print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {supplier_name} (–Ω–µ –≤ {selected_city})")
                continue
            
            print(f"\nüè™ –ü–∞—Ä—Å–∏–º {supplier_name} ({supplier_config['city']})...")
            
            for material in self.config['scout']['target_materials']:
                try:
                    products = self.search_product(supplier_name, material)
                    
                    if products:
                        # –ë–µ—Ä–µ–º —Ç–æ–≤–∞—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
                        best_product = min(products, key=lambda x: x['price'])
                        
                        all_prices.append({
                            'material': material,
                            'supplier': supplier_name,
                            'price': best_product['price'],
                            'product_name': best_product['name'],
                            'url': best_product['url'],
                            'city': supplier_config['city'],
                            'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        })
                        
                        print(f"   ‚úÖ {material}: {best_product['price']} —Ä—É–±. - {best_product['name'][:50]}...")
                    else:
                        print(f"   ‚ùå {material}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    
                    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    delay = settings['delay_between_requests'] + random.uniform(0.5, 1.5)
                    time.sleep(delay)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º User-Agent –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
                    if len(all_prices) % 5 == 0:
                        self.update_headers()
                    
                except Exception as e:
                    print(f"   üí• {material}: –æ—à–∏–±–∫–∞ - {e}")
                    continue
        
        return all_prices

    def get_available_cities(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
        cities = set()
        for supplier_config in self.config['scout']['suppliers'].values():
            cities.update(supplier_config['regions'])
        return sorted(list(cities))